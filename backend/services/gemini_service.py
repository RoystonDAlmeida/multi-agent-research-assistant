import os
import google.generativeai as genai
import logging
from typing import Optional

logger = logging.getLogger(__name__)

class GeminiService:
    """
    A service class for interacting with the Google Gemini API.
    This class encapsulates the configuration and content generation logic,
    providing a simple interface for other services to use the LLM.
    """
    def __init__(self):
        """
        Initializes the GeminiService. It retrieves the API key from environment
        variables, configures the `genai` library, and sets up the generative model.

        Raises:
            ValueError: If the GEMINI_API_KEY environment variable is not set.
        """
        self.api_key = os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")
        
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')

    async def generate_content(self, prompt: str, system_instruction: Optional[str] = None) -> str:
        """
        Generates content using the configured Gemini model.

        Args:
            prompt (str): The main prompt to send to the language model.
            system_instruction (Optional[str], optional): An optional system-level instruction
                                                        to guide the model's behavior. Defaults to None.

        Returns:
            str: The text content generated by the model. Returns "No response generated"
                 if the API returns an empty response.

        Raises:
            Exception: If an error occurs during the API call.
        """
        try:
            full_prompt = f"{system_instruction}\n\n{prompt}" if system_instruction else prompt
            
            response = self.model.generate_content(
                full_prompt,
                generation_config=genai.GenerationConfig(
                    temperature=0.3,
                    top_k=40,
                    top_p=0.95,
                    max_output_tokens=2048,
                )
            )
            
            return response.text if response.text else "No response generated"
            
        except Exception as e:
            logger.error(f"Gemini API error: {e}")
            raise
